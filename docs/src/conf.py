# -*- coding: utf-8 -*-
#
# Configuration file for the Sphinx documentation builder.
#
# This file does only contain a selection of the most common options. For a
# full list see the documentation:
# http://www.sphinx-doc.org/en/master/config

# -- Path setup --------------------------------------------------------------

# If extensions (or modules to document with autodoc) are in another directory,
# add these directories to sys.path here. If the directory is relative to the
# documentation root, use os.path.abspath to make it absolute, like shown here.
#
import os
import sys

# Source paths
mayaAPIObjectsInventoryPath = os.path.abspath('./data/objects_maya_python_api_v2.inv')
mayaCommandsObjectsInventoryPath = os.path.abspath('./data/objects_maya_python_commands.inv')
pythonObjectsInventoryPatchPath = os.path.abspath('./data/objects_python_v2_patch.inv')
pyside2ObjectsInventoryPatchPath = os.path.abspath('./data/objects_PySide_v2_patch.inv')

# msTools setup
msToolsPath = os.path.abspath('../..')
msToolsVendorPath = os.path.abspath('../../msTools/vendor')

sys.path.append(msToolsPath)
sys.path.append(msToolsVendorPath)

# Maya setup
mayaInstallPath = os.path.normpath(os.path.join(os.environ["ProgramFiles"], "Autodesk\\Maya2019"))
mayaPythonPackagesPath = os.path.join(mayaInstallPath, "Python/Lib/site-packages")
mayaDllPath = os.path.join(mayaInstallPath, "bin")

if os.path.exists(mayaInstallPath):
    # Provide access to Maya's Python packages
    sys.path.append(mayaPythonPackagesPath)

    # Allow Maya to find its resources upon initialization
    os.environ["MAYA_LOCATION"] = mayaInstallPath
    os.environ["PATH"] = os.environ["PATH"] + ";" + mayaDllPath + ";"
else:
    raise RuntimeError("Could not find Maya installation at : {}".format(mayaInstallPath))

import maya.standalone
maya.standalone.initialize(name='python')

import logging
from msTools.core.py import logging_utils
logging.setLoggerClass(logging_utils.Logger)

# Prevent import conflicts
from msTools.tools import tool_manager
from msTools.tools.docExplorer import main_setup   # noqa: F401
tool_manager.deregisterToolType("MRS", "Doc Explorer")
from msTools.tools.docExplorer import maya_setup   # noqa: F401

# Certain commands are not available to the standalone environment
from maya import cmds
cmds.nodeEditor = None

"""
Alternatives
------------
1. We could fake the Maya setup by using the stubs provided by the Maya devkit
    - This works well as long as your modules don't run code on setup
    - Try to add any setup code to a userSetup.py file instead of having it at the module level

    sys.path.append(os.path.abspath(os.environ["ProgramFiles"] + '/Autodesk/Maya2019/devkit/other/pymel/extras/completion/py'))

2. We could mock the relevant modules

    import mock
    for mod in ['msToolsUI.qt.packages.Qt', 'maya', 'maya.cmds', 'maya.OpenMaya', 'maya.OpenMayaUI', 'maya.api', 'maya.api.OpenMaya', 'maya.api.OpenMayaUI', 'pymel', 'pymel.core', 'maya.mel', 'pm']:
        sys.modules[mod] = mock.MagicMock()
"""

# Path to our custom summarytable directive
sys.path.append(os.path.abspath('./ext'))


# -- app setup --------------------------------------------------------------

def setup(app):
    # Custom javascript
    app.add_javascript('js/update_sidebar.js')

    # Custom css
    app.add_stylesheet('css/custom.css')


# -- Project information -----------------------------------------------------

project = u'msTools'
copyright = u'2020, Mitchell Simmons'
author = u'Mitchell Simmons'

# The short X.Y version
version = u''
# The full version, including alpha/beta/rc tags
release = u'0.0.1'


# -- General configuration ---------------------------------------------------

# If your documentation needs a minimal Sphinx version, state it here.
#
# needs_sphinx = '1.0'

# Add any Sphinx extension module names here, as strings. They can be
# extensions coming with Sphinx (named 'sphinx.ext.*') or your custom
# ones.
extensions = [
    'sphinx.ext.autodoc',
    'sphinx.ext.intersphinx',
    'sphinx_rtd_theme',
    'sphinx.ext.napoleon',
    'sphinx.ext.extlinks',
    'autobasicsummary',
]

# Add any paths that contain templates here, relative to this directory.
# templates_path = ["_templates"]

# The suffix(es) of source filenames.
# You can specify multiple suffix as a list of string:
#
# source_suffix = ['.rst', '.md']
source_suffix = '.rst'

# The master toctree document.
master_doc = 'index'

# The language for content autogenerated by Sphinx. Refer to documentation
# for a list of supported languages.
#
# This is also used if you do content translation via gettext catalogs.
# Usually you set "language" from the command line for these cases.
language = None

# List of patterns, relative to source directory, that match files and
# directories to ignore when looking for source files.
# This pattern also affects html_static_path and html_extra_path.
exclude_patterns = [u'_build', 'Thumbs.db', '.DS_Store']

# The name of the Pygments (syntax highlighting) style to use.
pygments_style = None

# This is the default, it avoids us having to include the py domain before a Python role (eg.class)
# We can write :class:`str` instead of :py:class:`str`
primary_domain = "py"


# -- Global rst ---------------------------------------------

# Unicode Definitions: https://www.compart.com/en/unicode/

rst_prolog = """
.. |xrarr|    unicode:: U+027F6 .. LONG RIGHTWARDS ARROW
"""

rst_epilog = """
.. _Qt: https://doc.qt.io/qtforpython-5/api.html
.. _OpenMaya: https://help.autodesk.com/view/MAYAUL/2020/ENU/?guid=Maya_SDK_MERGED_py_ref_index_html
.. _M*Array classes: https://help.autodesk.com/view/MAYAUL/2020/ENU/?guid=Maya_SDK_MERGED_py_ref_m_array_html
"""


# -- Options for HTML output -------------------------------------------------

# The theme to use for HTML and HTML Help pages.  See the documentation for
# a list of builtin themes.
#
# html_theme = 'alabaster'

import sphinx_rtd_theme  # noqa: F401
html_theme = 'sphinx_rtd_theme'

# Theme options are theme-specific and customize the look and feel of a theme
# further.  For a list of options available for each theme, see the
# documentation.
#
html_theme_options = {
    "sticky_navigation": False,
}

# Add any paths that contain custom static files (such as style sheets) here,
# relative to this directory. They are copied after the builtin static files,
# so a file named "default.css" will overwrite the builtin "default.css".
# See: https://docs.readthedocs.io/en/stable/guides/adding-custom-css.html
# NOTE : Sometimes `make clean` is required for reinstall
html_static_path = ['static']


# Custom sidebar templates, must be a dictionary that maps document names
# to template names.
#
# The default sidebars (for documents that don't match any pattern) are
# defined by theme itself.  Builtin themes are using these templates by
# default: ``['localtoc.html', 'relations.html', 'sourcelink.html',
# 'searchbox.html']``.


# Ensure the global toctree is always visible (ie. when viewing module documentation)
html_sidebars = {'**': ['globaltoc.html', 'relations.html', 'sourcelink.html', 'searchbox.html']}


# -- Options for HTMLHelp output ---------------------------------------------

# Output file base name for HTML help builder.
htmlhelp_basename = 'msToolsdoc'


# -- Extension configuration -------------------------------------------------

# -- Options for autodoc extension ---------------------------------------

# Ensure class attributes are documented before methods (member_order = 50) when 'groupwise' ordering is used
from sphinx.ext.autodoc import AttributeDocumenter
AttributeDocumenter.member_order = 5

autodoc_member_order = 'groupwise'
# NOTE: Seems to be a bug when setting these values to True (use None instead)
autodoc_default_options = {
    'members': None,
    'undoc-members': None,
    'show-inheritance': None,
    'special-members': None,
    'exclude-members': '__weakref__, __doc__, __module__, __dict__',
}


# -- Options for autobasicsummary extension ---------------------------------------

autobasicsummary_default_options = {
    'member-order': 'groupwise',
    'add-prefix': True,
    'members': True,
    'special-members': True,
    'exclude-members': '__weakref__, __doc__, __module__, __dict__',
}


# -- Options for intersphinx extension ---------------------------------------

# We have built a patch file for the Python inventory to include some missing or additional roles for certain objects
# For example the Python 2.7 inventory does not include an object for the list type
# Whilst certain types such as tuple are included under counter-intuitive roles (eg. :func:`tuple`)
# Alternatively we could fallback to the Python 3 inventory (not ideal)
intersphinx_mapping = {
    # 'python': ('https://docs.python.org/2.7', None),
    # 'python': ('https://docs.python.org/2.7', (None, 'https://docs.python.org/3/objects.inv')),
    'python': ('https://docs.python.org/2.7', pythonObjectsInventoryPatchPath),
    'PySide2': ('https://doc.qt.io/qtforpython-5', pyside2ObjectsInventoryPatchPath),
    'maya.OpenMaya': ('https://help.autodesk.com/view/MAYAUL/2020/ENU', mayaAPIObjectsInventoryPath),
    'maya.cmds': ('http://help.autodesk.com/cloudhelp/2020/ENU/Maya-Tech-Docs/CommandsPython/', mayaCommandsObjectsInventoryPath),
}

# -- Options for Napolean extension ---------------------------------------

napoleon_google_docstring = True
napoleon_numpy_docstring = False
# NOTE: The following `include` options interfere with the autodocs options (it is better to define these using the autodoc options)
# Napoleon defines its own callback for the `autodoc-skip-member` event in order to modify autodoc's behaviour
# This prevents us from using autodoc options such as `special-members`
napoleon_include_init_with_doc = False
napoleon_include_private_with_doc = False
napoleon_include_special_with_doc = False
napoleon_use_admonition_for_examples = False
napoleon_use_admonition_for_notes = False
napoleon_use_admonition_for_references = False
napoleon_use_ivar = False
napoleon_use_param = True
napoleon_use_rtype = False

# Monkey patch the GoogleDocstring._consume_field method to escape parameter names that end with an underscore
# By default the rst format treats trailing underscores as references however it is possible to escape rst inline markup
# https://github.com/sphinx-contrib/napoleon/blob/master/sphinxcontrib/napoleon/docstring.py
from sphinx.ext.napoleon import docstring


def escape_trailing_underscore(func):
    def wrapper(*args, **kwargs):
        _name, _type, _descs = func(*args, **kwargs)
        if _name.endswith('_'):
            _name = _name[:-1] + r'\_'

        return _name, _type, _descs

    return wrapper


docstring.GoogleDocstring._consume_field = escape_trailing_underscore(docstring.GoogleDocstring._consume_field)
